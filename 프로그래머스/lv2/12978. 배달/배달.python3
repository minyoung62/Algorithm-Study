import heapq
def di(graph, N, K):
    INF = 1e9
    dist = [INF] * (1 + N)
    
    q = []
    heapq.heappush(q, (0, 1))
    dist[1] = 0
    while q:
        d, now = heapq.heappop(q)
        
        if dist[now] < d:
            continue
        
        for i in graph[now]:
            cost = i[1] + d
            if cost < dist[i[0]]:
                dist[i[0]] = cost
                heapq.heappush(q, (cost, i [0]))
    return dist
        

def solution(N, road, K):
    answer = 0
    
    graph = [
        []
        for _ in range(N + 1)
    ]
    
    for i in road:
        graph[i[0]].append((i[1],i[2]))
        graph[i[1]].append((i[0],i[2]))
    distList = di(graph, N, K)

    for i in distList:
        if K >= i:
            answer += 1
    
    return answer