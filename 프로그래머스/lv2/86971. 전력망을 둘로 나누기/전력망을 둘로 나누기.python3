from collections import deque

def bfs(wries, start, n):
    visited = [False] * (n + 1)
    graph = [[] for _ in range(n + 1)]
    cnt = 0
    for i in range(n-2):
        a, b = tuple(wries[i])
        graph[a].append(b)
        graph[b].append(a)
    
    q = deque()
    q.append(start)
    visited[start] = True
    
    while q:
        x = q.popleft()
        for i in graph[x]:
            if not visited[i]:
                visited[i] = True
                q.append(i)
                cnt += 1
        
    return cnt
    
def solution(n, wires):
    answer = 1e9
    
    for i in range(n):
        tmp = wires.pop()
        a, b = tmp[0], tmp[1]
        
        c = []
        for start in tmp:
            c.append(bfs(wires, start, n))
        
        wires = [tmp] + wires

        answer = min(answer, abs(c[0] - c[1]))
        
    return answer
